apiVersion: aam.globalsphare.com/v1alpha1
kind: WorkloadVendor
metadata:
  name: rabbitmq3-plugins-ceph
spec: |
  import "mod/context"
  import "mod/auth"

  parameter: {
    image: *"rabbitmq:3-management" | string
    vhost: *"my_vhost" | string
    user: *"admin" | string
    password: *"123456" | string
    size: *"1G" | string
    after?: string
  }

  construct: "\(context.componentName)-configmap": {
   apiVersion: "v1"
   kind: "ConfigMap"
   metadata: {
       name:      context.componentName
       namespace: context.namespace
   }
   data: {
       "enabled_plugins": """
       [rabbitmq_federation_management,rabbitmq_management,rabbitmq_mqtt,rabbitmq_stomp].
       """
   }
  }

  construct: "\(context.componentName)-statefulset": {
    apiVersion: "apps/v1"
    kind: "StatefulSet"
    metadata: {
      name: context.componentName
      namespace: context.namespace
    }
    spec: {
      selector: matchLabels: {
        "app":       context.appName
        "component": context.componentName
      }
      serviceName: context.componentName
      volumeClaimTemplates: [{
        metadata: name: "storage"
        spec: {
          accessModes: ["ReadWriteOnce"]
          storageClassName: "rook-cephfs"
          resources: requests: storage: parameter["size"]
        }
      }]
      template: {
          metadata: labels: {
              "app":       context.appName
              "component": context.componentName
          }
          spec: {
              serviceAccountName: context.appName
              if parameter["after"] != _|_ {
                initContainers: [{
                    name:  "init"
                    image: "harbor1.zlibs.com/island/centos:7"
                    command: ["/bin/sh"]
                    args: ["-c", "while true; do curl 'http://island-api.island-system/status/\(context.namespace)/\(parameter.after)' | grep '\"result\":1'; if [ $? -ne 0 ]; then sleep 4s; continue; else break; fi; done"]
                }]
              }
              containers: [{
                   name: "main"
                   image: parameter["image"]
                   imagePullPolicy: "IfNotPresent"
                   env: [{
                      name: "RABBITMQ_DEFAULT_VHOST"
                      value: parameter["vhost"]
                   },{
                      name: "RABBITMQ_DEFAULT_USER"
                      value: parameter["user"]
                   },{
                      name: "RABBITMQ_DEFAULT_PASS"
                      value: parameter["password"]
                   }]
                   volumeMounts:[{
                      mountPath: "/etc/rabbitmq/enabled_plugins"
                      name: "conf"
                      subPath: "enabled_plugins"
                   }, {
                      mountPath: "/var/lib/rabbitmq"
                      name: "storage"
                   }]
              }, {
                   name:  "status"
                   image: "harbor1.zlibs.com/island/centos:7"
                   command: ["/bin/sh", "-c", "while true; do resp=`curl -X PUT -H 'Content-Type: application/json' -d '{\"message\": \"\(context.componentName) 部署成功\"}' http://island-api.island-system/status/\(context.namespace)/\(context.componentName)/1 | grep '\"code\":0' | wc -l `; if [[ $resp -ne 1 ]]; then sleep 30s; else sleep 3600d ; fi; done"]
              }]
              restartPolicy: "Always"
              volumes: [{
                  name: "conf"
                  configMap: name: "\(context.componentName)"
              }]
         }
     }
   }
  }

  construct: "\(context.componentName)-service": {
    apiVersion: "v1"
    kind:       "Service"
    metadata: {
        name:      context.componentName
        namespace: context.namespace
    }
    spec: {
        selector: {
            "app":       context.appName
            "component": context.componentName
        }
        ports: [{
            port: 1883
            name: "port-1833"
        },{
            port: 4369
            name: "port-4369"
        },{
            port: 5671
            name: "port-5671"
        },{
            port: 5672
            name: "port-5672"
        },{
            port: 8883
            name: "port-8883"
        },{
            port: 15672
            name: "port-15672"
        },{
            port: 25672
            name: "port-25672"
        },{
            port: 61613
            name: "port-61613"
        },{
            port: 61614
            name: "port-61614"
        }]
        type: "ClusterIP"
    }
  }
