apiVersion: aam.globalsphare.com/v1alpha1
kind: WorkloadVendor
metadata:
  name: rabbitmq3
spec: |
  import "mod/context"
  import "mod/auth"

  parameter: {
    image: *"harbor1.zlibs.com/hub/bitnami/zookeeper:3.7" | string
    port: *2181 | int
    size: *"1G" | string
    after?: string
  }


  construct: "\(context.componentName)-deployment": {
    apiVersion: "apps/v1"
    kind: "Deployment"
    metadata: {
      name: context.componentName
      namespace: context.namespace
    }
    spec: {
      selector: matchLabels: {
        "app":       context.appName
        "component": context.componentName
      }
      replicas: 1
      template: {
          metadata: labels: {
              "app":       context.appName
              "component": context.componentName
          }
          spec: {
              serviceAccountName: context.appName
              if parameter["after"] != _|_ {
                initContainers: [{
                    name:  "init"
                    image: "harbor1.zlibs.com/island/centos:7"
                    command: ["/bin/sh"]
                    args: ["-c", "while true; do curl 'http://island-api.island-system/status/\(context.namespace)/\(parameter.after)' | grep '\"result\":1'; if [ $? -ne 0 ]; then sleep 4s; continue; else break; fi; done"]
                }]
              }
              containers: [{
                   name: "main"
                   image: parameter["image"]
                   imagePullPolicy: "IfNotPresent"
                   env: [{
                      name: "ALLOW_ANONYMOUS_LOGIN"
                      value: "yes"
                   }]
              }, {
                   name:  "status"
                   image: "harbor1.zlibs.com/island/centos:7"
                   command: ["/bin/sh", "-c", "while true; do resp=`curl -X PUT -H 'Content-Type: application/json' -d '{\"message\": \"\(context.componentName) 部署成功\"}' http://island-api.island-system/status/\(context.namespace)/\(context.componentName)/1 | grep '\"code\":0' | wc -l `; if [[ $resp -ne 1 ]]; then sleep 30s; else sleep 3600d ; fi; done"]
              }]
              restartPolicy: "Always"
          }
      }
    }
  }

  construct: "\(context.componentName)-service": {
    apiVersion: "v1"
    kind:       "Service"
    metadata: {
        name:      context.componentName
        namespace: context.namespace
    }
    spec: {
        selector: {
            "app":       context.appName
            "component": context.componentName
        }
        ports: [{
            port: 2181
            name: "port-2181"
        }]
        type: "ClusterIP"
    }
  }
